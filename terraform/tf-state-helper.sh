#!/usr/bin/env bash

# This script can be used to replace the current Terraform backend configuration of a stage
# with a GitLab HTTP backend configuration.
#
# The existing Terraform backend configuration file will be moved to a directory that will not
# be used by Terraform.

set -u
set -o pipefail

STAGES_ROOT_PATH="stages"
BACKENDS_DIR="backends"

function main() {
  local stage="${1:-}"
  local environment="${2:-}"
  local gitlab_url="${3:-}"
  local gitlab_token_name="${GITLAB_TOKEN_NAME:-}"
  local gitlab_token="${GITLAB_TOKEN:-}"

  if [[ "${stage}" == "" || "${environment}" == "" || "${gitlab_url}" == "" || "${gitlab_token_name}" == "" || "${gitlab_token}" == "" ]]; then
    err "Error: missing parameter"
    usage
    exit 1
  fi

  assert_stage_exists_or_exit "$stage"

  if ! move_state "$stage"; then
    err_and_exit "Error: failed to move state file"
  fi

  generate_gitlab_http_state_file "$stage" "$environment" "$gitlab_url" "$gitlab_token_name" "$gitlab_token"
}

function usage() {
  echo "Usage: $0 <stage> <environment> <gitlab_url>"
  echo "  stage: the stage name (e.g. 00-bootstrap)"
  echo "  environment: the environment name (e.g. prod)"
  echo "  gitlab_url: the GitLab URL with the project included (e.g. https://gitlab.com/api/v4/projects/123456)"
  echo ""
  echo "Environment variables:"
  echo "  GITLAB_TOKEN_NAME: the token name assigned in GitLab"
  echo "  GITLAB_TOKEN: the token secret value generated by GitLab"
}

function assert_stage_exists_or_exit() {
  local stage="${1:?stage is not defined or is empty}"

  if [[ ! -d "${STAGES_ROOT_PATH}/${stage}" ]]; then
    err_and_exit "Error: stage ${stage} not found"
  fi
}

function get_stage_path() {
  local stage="${1:?stage is not defined or is empty}"

  echo "${STAGES_ROOT_PATH}/${stage}"
}

STATE_FILE_NOT_FOUND=1
MULTIPLE_STATE_FILE_FOUND=2

#######################################
# Return the file path of the Terraform backend file for the given stage
# Arguments:
#   stage name
# Return:
#   The file path of the backend file. The return value is set only if return code is 0.
# Return codes:
#   0 if the stage contains a Terraform backend file
#   1 if the stage does not contain a backend file
#   2 if the stage contains multiple backendd file
#######################################
function get_state_file_path() {
  local stage="${1:?stage is not defined or is empty}"
  local stage_path=$(get_stage_path "${stage}")
  local backend_files=$(find "${stage_path}" -name 'backend-*.tf' -maxdepth 1)
  # Count non-blank lines to determine the number of backend files found
  local num_backend_files=$(grep -c -E '^.+$' <<< "${backend_files}")

  if [[ "${num_backend_files}" -eq 0 ]]; then
    return "${STATE_FILE_NOT_FOUND}"
  fi

  if [[ "${num_backend_files}" -gt 1 ]]; then
    return ${MULTIPLE_STATE_FILE_FOUND}
  fi

  echo "${backend_files}"
}

#######################################
# Move the Terraform backend file to a directory that will not be used by Terraform
#######################################
function move_state() {
  local stage="${1:?stage is not defined or is empty}"
  local stage_path=$(get_stage_path "${stage}")

  state_file_path=$(get_state_file_path "${stage}"); local status=$?

  case $status in
    "${MULTIPLE_STATE_FILE_FOUND}") err_and_exit "Error: multiple state file found for stage ${stage}" ;;
    "${STATE_FILE_NOT_FOUND}") info "State file not found, skipping moving."; return ;;
    0) info "Moving state file ${state_file_path} ..." ;;
  esac

  local state_file_name=$(basename "${state_file_path}")
  local state_file_target_path="${stage_path}/${BACKENDS_DIR}/${state_file_name}"

  if [[ -f "${state_file_target_path}" ]]; then
    err_and_exit "Error: ${state_file_target_path} already exists. Can not move state file."
  fi

  mkdir -p "${stage_path}/${BACKENDS_DIR}"
  mv "${state_file_path}" "${state_file_target_path}"
}

#######################################
# Generate a new Terraform backend configuration file with GitLab HTTP backend configuration
# The backend file will be saved in the stage directory
#######################################
function generate_gitlab_http_state_file() {
  local stage="${1:?stage is not defined or is empty}"
  local environment="${2:?environment is not defined or is empty}"
  local gitlab_url="${3:?gitlab_url is not defined or is empty}"
  local gitlab_token_name="${4:?gitlab_token_name is not defined or is empty}"
  local gitlab_token="${5:?gitlab_token is not defined or is empty}"

  local stage_path=$(get_stage_path "${stage}")
  local new_state_file_path="${stage_path}/backend-${environment}.tf"
  local gitlab_base_url="${gitlab_url}/terraform/state/${stage}-${environment}"

  cat > "${new_state_file_path}" <<EOF
terraform {
  backend "http" {
    address = "${gitlab_base_url}"
    lock_address = "${gitlab_base_url}/lock"
    unlock_address = "${gitlab_base_url}/lock"
    lock_method = "POST"
    unlock_method = "DELETE"
    retry_wait_min = 5
    username = "${gitlab_token_name}"
    password = "${gitlab_token}"
  }
}
EOF

  info "State file ${new_state_file_path} created"
}

function err() {
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')] $*" >&2
}

function info() {
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')] $*"
}

function err_and_exit() {
  err "$*"
  exit 1
}

main "$@"